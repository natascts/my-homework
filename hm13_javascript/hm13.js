  //*********************************************************TRY...CATCH...FINALLY
  //   –ó–∞–≤–¥–∞–Ω–Ω—è 1: –†–æ–±–æ—Ç–∞ –∑ finally
  //   –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥ —É –∫–æ–Ω—Å–æ–ª—å?

  //   try {
  //       console.log("–ü–µ—Ä–µ–¥ –ø–æ–º–∏–ª–∫–æ—é");
  //       throw new Error("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫");
  //   } catch (error) {
  //       console.log("–û–±—Ä–æ–±–ª–µ–Ω–æ:", error.message);
  //   } finally {
  //       console.log("–ë–ª–æ–∫ finally –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏");
  //   }
  //   console.log("–ü—ñ—Å–ª—è try...catch...finally");

  //–¶–µ–π –∫–æ–¥ –≤–∏–≤–µ–¥–µ —Å–ø–æ—á–∞—Ç–∫—É: "–ü–µ—Ä–µ–¥ –ø–æ–º–∏–ª–∫–æ—é", –ø–æ—Ç—ñ–º "–û–±—Ä–æ–±–ª–µ–Ω–æ: –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫", –ø–æ—Ç—ñ–º –±—É–¥–µ: "–ë–ª–æ–∫ finally –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏"
  //  —ñ –≤ –∫—ñ–Ω—Ü—ñ: "–ü—ñ—Å–ª—è try...catch...finally".


  //   –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  //   –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é parseNumber(input), —è–∫–∞ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ input –Ω–∞ —á–∏—Å–ª–æ. –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–∏–¥–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ". –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π try...catch –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –≤–∏–≤–µ–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

// function parseNumber(input) {
//     try {
//         let num = Number(input);
//         if (isNaN(num)){
//             throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ");
//         } else {
//             return num;
//         }
//     }
//     catch (error) {
//         console.log(error.message);
//     }
// }
// parseNumber("dscsdd");


  //*************************************   –í–ø—Ä–∞–≤–∏ –Ω–∞ —Ç–µ–º—É "–û–±—ñ—Ü—è–Ω–∫–∏ (Promise) –≤ ES6" –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
  // üîπ –í–ø—Ä–∞–≤–∞ 1: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è reject
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥ —É –∫–æ–Ω—Å–æ–ª—å?

  // const myPromise = new Promise((resolve, reject) => {
  //   reject("‚ùå –ü–æ–º–∏–ª–∫–∞!");
  // });

  // myPromise
  //   .then((message) => console.log(message))
//   .catch((error) => console.error(error));
  
//–¶–µ–π –∫–æ–¥ –≤–∏–≤–µ–¥–µ –ø–æ–º–∏–ª–∫—É, —Ç–æ–±—Ç–æ: ‚ùå –ü–æ–º–∏–ª–∫–∞!.


  // üîπ –í–ø—Ä–∞–≤–∞ 2: .catch() –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —É then()
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥?

  // const myPromise = new Promise((resolve) => {
  //   resolve(10);
  // });

  // myPromise
  //   .then((num) => {
  //     throw new Error("‚ùå –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!");
  //   })
  //   .catch((error) => console.error(error.message));
// –¶–µ–π –∫–æ–¥ –≤–∏–≤–µ–¥–µ: ‚ùå –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!, –±–æ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —É then(), –≤–æ–Ω–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ .catch().

  // üîπ –í–ø—Ä–∞–≤–∞ 3: Promise.all()
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥?

  // const promise1 = new Promise((resolve) => setTimeout(() => resolve("‚úÖ –ü–µ—Ä—à–µ"), 1000));
  // const promise2 = new Promise((resolve) => setTimeout(() => resolve("‚úÖ –î—Ä—É–≥–µ"), 2000));

  // Promise.all([promise1, promise2]).then((results) => console.log(results));

//–ö–æ–¥ –≤–∏–≤–µ–¥–µ —Å–ø–æ—á–∞—Ç–∫—É ‚úÖ –ü–µ—Ä—à–µ, –ø–æ—Ç—ñ–º ‚úÖ –î—Ä—É–≥–µ, —Ö–æ—á–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—å –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –æ–¥–Ω–∞ –æ–¥–Ω—ñ–π —Ç–∞ –±—É–¥—É—Ç—å
//–≤–∏–≤–µ–¥–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –≤—Å—ñ promises –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω–∞–Ω—ñ.

  // üîπ –í–ø—Ä–∞–≤–∞ 4: –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è Promise.allSettled()
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥?

  // const promise1 = new Promise((resolve) => setTimeout(() => resolve("‚úÖ –£—Å–ø—ñ—Ö"), 1000));
  // const promise2 = new Promise((_, reject) => setTimeout(() => reject("‚ùå –ü–æ–º–∏–ª–∫–∞"), 2000));

// Promise.allSettled([promise1, promise2]).then((results) => console.log(results));
  
//–¶–µ–π –∫–æ–¥ –≤–∏–≤–µ–¥–µ —Å–ø–æ—á–∞—Ç–∫—É ‚úÖ –£—Å–ø—ñ—Ö, –∞ –ø–æ—Ç—ñ–º ‚ùå –ü–æ–º–∏–ª–∫–∞.

  //*************************************************   üìù –í–ø—Ä–∞–≤–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ —Ç–µ–º—ñ async/await
  // üîπ –í–ø—Ä–∞–≤–∞ 1: await —É —Ñ—É–Ω–∫—Ü—ñ—ó
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥ —É –∫–æ–Ω—Å–æ–ª—å? –ß–æ–º—É

  // async function getData() {
  //   let result = await Promise.resolve("üöÄ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ!");
  //   console.log(result);
  // }

  // getData();
// console.log("‚è≥ –û—á—ñ–∫—É—î–º–æ...");
  
//–ö–æ–¥ –≤–∏–≤–µ–¥–µ–º–µ —Å–ø–æ—á–∞—Ç–∫—É ‚è≥ –û—á—ñ–∫—É—î–º–æ..., –∞ –ø–æ—Ç—ñ–º üöÄ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ!, –±–æ JS —Ä—É—à—ñ–π —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω—É—î –æ—Å–Ω–æ–≤–∏–π –∫–æ–¥, –∞ –ø—ñ—Å–ª—è –≤–∂–µ
// async —É —Ñ—É–Ω–∫—Ü—ñ—è—Ö.


  // üîπ –í–ø—Ä–∞–≤–∞ 2: –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è await
  // –Ø–∫–∏–π –±—É–¥–µ –ø–æ—Ä—è–¥–æ–∫ –≤–∏–≤–æ–¥—É —É –∫–æ–Ω—Å–æ–ª—å? –ß–æ–º—É

  // async function loadData() {
  //   console.log("1Ô∏è‚É£ –ü–æ—á–∞—Ç–æ–∫");

  //   let data1 = await new Promise((resolve) => setTimeout(() => resolve("üìÑ –î–∞–Ω—ñ 1"), 2000));
  //   console.log(data1);

  //   let data2 = await new Promise((resolve) => setTimeout(() => resolve("üìÑ –î–∞–Ω—ñ 2"), 1000));
  //   console.log(data2);

  //   console.log("üèÅ –ö—ñ–Ω–µ—Ü—å");
  // }

// loadData();
  
//–°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–µ–¥–µ—Ç—å—Å—è 1Ô∏è‚É£ –ü–æ—á–∞—Ç–æ–∫, –ø–æ—Ç—ñ–º üìÑ –î–∞–Ω—ñ 1, üìÑ –î–∞–Ω—ñ 2 —ñ –≤ –∫—ñ–Ω—Ü—ñ üèÅ –ö—ñ–Ω–µ—Ü—å, –±–æ await —Ä–æ–±–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º,
// —Ç–æ–±—Ç–æ –∑—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö promises.


  // üîπ –í–ø—Ä–∞–≤–∞ 3: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è fetch
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥? –ß–æ–º—É

  // async function getUser() {
  //   let response = await fetch("https://jsonplaceholder.typicode.com/users/1");
  //   let user = await response.json();
  //   console.log(user.name);
  // }

// getUser();
  //–ö–æ–¥ –ø–æ–≤–µ—Ä–Ω–µ user.name –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: Leanne Graham, —Ç–æ–º—É —â–æ fetch —Ä–æ–±–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ "https://jsonplaceholder.typicode.com/users/1"
  //—Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î promise –∑ HTTP-–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é, –≤ response.json() –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É –≤–∏–≥–ª—è–¥—ñ JSON, –∞ await –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ 
  //–∫–æ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ. 


  // üîπ –í–ø—Ä–∞–≤–∞ 4: –ß–æ–º—É setTimeout –Ω–µ –ø—Ä–∞—Ü—é—î –∑ await?
  // –©–æ –≤–∏–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥? –ß–æ–º—É

//   async function delay() {
//     await setTimeout(() => console.log("‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞"), 2000);
//     console.log("üèÅ –ö—ñ–Ω–µ—Ü—å");
//   }

// delay();
// –ö–æ–¥ –≤–∏–≤–µ–¥–µ —Å–ø–æ—á–∞—Ç–∫—É üèÅ –ö—ñ–Ω–µ—Ü—å, –∞ –ø–æ—Ç—ñ–º ‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞, —Ç–æ–º—É —â–æ setTimeout() –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î promise, —Ç–æ–º—É 
// —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è console.log("üèÅ –ö—ñ–Ω–µ—Ü—å"), –∞ –ø–æ—Ç—ñ–º –∫–æ–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å 2—Å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è console.log("‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞").
